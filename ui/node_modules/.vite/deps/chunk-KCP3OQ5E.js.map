{
  "version": 3,
  "sources": ["../../vuetify/src/composables/group.ts"],
  "sourcesContent": ["// Composables\nimport { useProxiedModel } from './proxiedModel'\n\n// Utilities\nimport { computed, inject, onBeforeUnmount, onMounted, provide, reactive, toRef, unref, watch } from 'vue'\nimport { consoleWarn, deepEqual, findChildrenWithProvide, getCurrentInstance, getUid, propsFactory, wrapInArray } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, ComputedRef, ExtractPropTypes, InjectionKey, PropType, Ref, UnwrapRef } from 'vue'\nimport type { EventProp } from '@/util'\n\nexport interface GroupItem {\n  id: number\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n}\n\nexport interface GroupProps {\n  disabled: boolean\n  modelValue: unknown\n  multiple?: boolean\n  mandatory?: boolean | 'force' | undefined\n  max?: number | undefined\n  selectedClass: string | undefined\n  'onUpdate:modelValue': EventProp<[unknown]> | undefined\n}\n\nexport interface GroupProvide {\n  register: (item: GroupItem, cmp: ComponentInternalInstance) => void\n  unregister: (id: number) => void\n  select: (id: number, value: boolean) => void\n  selected: Ref<Readonly<number[]>>\n  isSelected: (id: number) => boolean\n  prev: () => void\n  next: () => void\n  selectedClass: Ref<string | undefined>\n  items: ComputedRef<{\n    id: number\n    value: unknown\n    disabled: boolean | undefined\n  }[]>\n  disabled: Ref<boolean | undefined>\n  getItemIndex: (value: unknown) => number\n}\n\nexport interface GroupItemProvide {\n  id: number\n  isSelected: Ref<boolean>\n  toggle: () => void\n  select: (value: boolean) => void\n  selectedClass: Ref<(string | undefined)[] | false>\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n  group: GroupProvide\n}\n\nexport const makeGroupProps = propsFactory({\n  modelValue: {\n    type: null,\n    default: undefined,\n  },\n  multiple: Boolean,\n  mandatory: [Boolean, String] as PropType<boolean | 'force'>,\n  max: Number,\n  selectedClass: String,\n  disabled: Boolean,\n}, 'group')\n\nexport const makeGroupItemProps = propsFactory({\n  value: null,\n  disabled: Boolean,\n  selectedClass: String,\n}, 'group-item')\n\nexport interface GroupItemProps extends ExtractPropTypes<ReturnType<typeof makeGroupItemProps>> {\n  'onGroup:selected': EventProp<[{ value: boolean }]> | undefined\n}\n\n// Composables\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required?: true,\n): GroupItemProvide\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required: false,\n): GroupItemProvide | null\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required = true,\n): GroupItemProvide | null {\n  const vm = getCurrentInstance('useGroupItem')\n\n  if (!vm) {\n    throw new Error(\n      '[Vuetify] useGroupItem composable must be used inside a component setup function'\n    )\n  }\n\n  const id = getUid()\n\n  provide(Symbol.for(`${injectKey.description}:id`), id)\n\n  const group = inject(injectKey, null)\n\n  if (!group) {\n    if (!required) return group\n\n    throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${injectKey.description}`)\n  }\n\n  const value = toRef(props, 'value')\n  const disabled = computed(() => !!(group.disabled.value || props.disabled))\n\n  group.register({\n    id,\n    value,\n    disabled,\n  }, vm)\n\n  onBeforeUnmount(() => {\n    group.unregister(id)\n  })\n\n  const isSelected = computed(() => {\n    return group.isSelected(id)\n  })\n\n  const selectedClass = computed(() => isSelected.value && [group.selectedClass.value, props.selectedClass])\n\n  watch(isSelected, value => {\n    vm.emit('group:selected', { value })\n  }, { flush: 'sync' })\n\n  return {\n    id,\n    isSelected,\n    toggle: () => group.select(id, !isSelected.value),\n    select: (value: boolean) => group.select(id, value),\n    selectedClass,\n    value,\n    disabled,\n    group,\n  }\n}\n\nexport function useGroup (\n  props: GroupProps,\n  injectKey: InjectionKey<GroupProvide>\n) {\n  let isUnmounted = false\n  const items = reactive<GroupItem[]>([])\n  const selected = useProxiedModel(\n    props,\n    'modelValue',\n    [],\n    v => {\n      if (v == null) return []\n\n      return getIds(items, wrapInArray(v))\n    },\n    v => {\n      const arr = getValues(items, v)\n\n      return props.multiple ? arr : arr[0]\n    }\n  )\n\n  const groupVm = getCurrentInstance('useGroup')\n\n  function register (item: GroupItem, vm: ComponentInternalInstance) {\n    // Is there a better way to fix this typing?\n    const unwrapped = item as unknown as UnwrapRef<GroupItem>\n\n    const key = Symbol.for(`${injectKey.description}:id`)\n    const children = findChildrenWithProvide(key, groupVm?.vnode)\n    const index = children.indexOf(vm)\n\n    if (unref(unwrapped.value) == null) {\n      unwrapped.value = index\n    }\n\n    if (index > -1) {\n      items.splice(index, 0, unwrapped)\n    } else {\n      items.push(unwrapped)\n    }\n  }\n\n  function unregister (id: number) {\n    if (isUnmounted) return\n\n    // TODO: re-evaluate this line's importance in the future\n    // should we only modify the model if mandatory is set.\n    // selected.value = selected.value.filter(v => v !== id)\n\n    forceMandatoryValue()\n\n    const index = items.findIndex(item => item.id === id)\n    items.splice(index, 1)\n  }\n\n  // If mandatory and nothing is selected, then select first non-disabled item\n  function forceMandatoryValue () {\n    const item = items.find(item => !item.disabled)\n    if (item && props.mandatory === 'force' && !selected.value.length) {\n      selected.value = [item.id]\n    }\n  }\n\n  onMounted(() => {\n    forceMandatoryValue()\n  })\n\n  onBeforeUnmount(() => {\n    isUnmounted = true\n  })\n\n  function select (id: number, value?: boolean) {\n    const item = items.find(item => item.id === id)\n    if (value && item?.disabled) return\n\n    if (props.multiple) {\n      const internalValue = selected.value.slice()\n      const index = internalValue.findIndex(v => v === id)\n      const isSelected = ~index\n      value = value ?? !isSelected\n\n      // We can't remove value if group is\n      // mandatory, value already exists,\n      // and it is the only value\n      if (\n        isSelected &&\n        props.mandatory &&\n        internalValue.length <= 1\n      ) return\n\n      // We can't add value if it would\n      // cause max limit to be exceeded\n      if (\n        !isSelected &&\n        props.max != null &&\n        internalValue.length + 1 > props.max\n      ) return\n\n      if (index < 0 && value) internalValue.push(id)\n      else if (index >= 0 && !value) internalValue.splice(index, 1)\n\n      selected.value = internalValue\n    } else {\n      const isSelected = selected.value.includes(id)\n      if (props.mandatory && isSelected) return\n\n      selected.value = (value ?? !isSelected) ? [id] : []\n    }\n  }\n\n  function step (offset: number) {\n    // getting an offset from selected value obviously won't work with multiple values\n    if (props.multiple) consoleWarn('This method is not supported when using \"multiple\" prop')\n\n    if (!selected.value.length) {\n      const item = items.find(item => !item.disabled)\n      item && (selected.value = [item.id])\n    } else {\n      const currentId = selected.value[0]\n      const currentIndex = items.findIndex(i => i.id === currentId)\n\n      let newIndex = (currentIndex + offset) % items.length\n      let newItem = items[newIndex]\n\n      while (newItem.disabled && newIndex !== currentIndex) {\n        newIndex = (newIndex + offset) % items.length\n        newItem = items[newIndex]\n      }\n\n      if (newItem.disabled) return\n\n      selected.value = [items[newIndex].id]\n    }\n  }\n\n  const state: GroupProvide = {\n    register,\n    unregister,\n    selected,\n    select,\n    disabled: toRef(props, 'disabled'),\n    prev: () => step(items.length - 1),\n    next: () => step(1),\n    isSelected: (id: number) => selected.value.includes(id),\n    selectedClass: computed(() => props.selectedClass),\n    items: computed(() => items),\n    getItemIndex: (value: unknown) => getItemIndex(items, value),\n  }\n\n  provide(injectKey, state)\n\n  return state\n}\n\nfunction getItemIndex (items: UnwrapRef<GroupItem[]>, value: unknown) {\n  const ids = getIds(items, [value])\n\n  if (!ids.length) return -1\n\n  return items.findIndex(item => item.id === ids[0])\n}\n\nfunction getIds (items: UnwrapRef<GroupItem[]>, modelValue: any[]) {\n  const ids: number[] = []\n\n  modelValue.forEach(value => {\n    const item = items.find(item => deepEqual(value, item.value))\n    const itemByIndex = items[value]\n\n    if (item?.value != null) {\n      ids.push(item.id)\n    } else if (itemByIndex != null) {\n      ids.push(itemByIndex.id)\n    }\n  })\n\n  return ids\n}\n\nfunction getValues (items: UnwrapRef<GroupItem[]>, ids: any[]) {\n  const values: unknown[] = []\n\n  ids.forEach(id => {\n    const itemIndex = items.findIndex(item => item.id === id)\n    if (~itemIndex) {\n      const item = items[itemIndex]\n      values.push(item.value != null ? item.value : itemIndex)\n    }\n  })\n\n  return values\n}\n"],
  "mappings": "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",
  "names": ["makeGroupProps", "propsFactory", "modelValue", "type", "default", "undefined", "multiple", "Boolean", "mandatory", "String", "max", "Number", "selectedClass", "disabled", "makeGroupItemProps", "value", "useGroupItem", "props", "injectKey", "required", "arguments", "length", "vm", "getCurrentInstance", "Error", "id", "getUid", "provide", "Symbol", "for", "description", "group", "inject", "toRef", "computed", "register", "onBeforeUnmount", "unregister", "isSelected", "watch", "emit", "flush", "toggle", "select", "useGroup", "isUnmounted", "items", "reactive", "selected", "useProxiedModel", "v", "getIds", "wrapInArray", "arr", "getValues", "groupVm", "item", "unwrapped", "key", "children", "findChildrenWithProvide", "vnode", "index", "indexOf", "unref", "splice", "push", "forceMandatoryValue", "findIndex", "find", "onMounted", "internalValue", "slice", "includes", "step", "offset", "consoleWarn", "currentId", "currentIndex", "i", "newIndex", "newItem", "state", "prev", "next", "getItemIndex", "ids", "forEach", "deepEqual", "itemByIndex", "values", "itemIndex"]
}
