{
  "version": 3,
  "sources": ["../../vuetify/src/composables/theme.ts"],
  "sourcesContent": ["// Utilities\nimport {\n  computed,\n  inject,\n  provide,\n  ref,\n  watch,\n  watchEffect,\n} from 'vue'\nimport {\n  createRange,\n  darken,\n  getCurrentInstance,\n  getForeground,\n  getLuma,\n  IN_BROWSER,\n  lighten,\n  mergeDeep,\n  parseColor,\n  propsFactory,\n  RGBtoHex,\n} from '@/util'\n\n// Types\nimport type { VueHeadClient } from '@unhead/vue'\nimport type { HeadClient } from '@vueuse/head'\nimport type { App, DeepReadonly, InjectionKey, Ref } from 'vue'\n\ntype DeepPartial<T> = T extends object ? { [P in keyof T]?: DeepPartial<T[P]> } : T\n\nexport type ThemeOptions = false | {\n  cspNonce?: string\n  defaultTheme?: string\n  variations?: false | VariationsOptions\n  themes?: Record<string, ThemeDefinition>\n}\nexport type ThemeDefinition = DeepPartial<InternalThemeDefinition>\n\ninterface InternalThemeOptions {\n  cspNonce?: string\n  isDisabled: boolean\n  defaultTheme: string\n  variations: false | VariationsOptions\n  themes: Record<string, InternalThemeDefinition>\n}\n\ninterface VariationsOptions {\n  colors: string[]\n  lighten: number\n  darken: number\n}\n\ninterface InternalThemeDefinition {\n  dark: boolean\n  colors: Colors\n  variables: Record<string, string | number>\n}\n\nexport interface Colors extends BaseColors, OnColors {\n  [key: string]: string\n}\n\ninterface BaseColors {\n  background: string\n  surface: string\n  primary: string\n  secondary: string\n  success: string\n  warning: string\n  error: string\n  info: string\n}\n\ninterface OnColors {\n  'on-background': string\n  'on-surface': string\n  'on-primary': string\n  'on-secondary': string\n  'on-success': string\n  'on-warning': string\n  'on-error': string\n  'on-info': string\n}\n\nexport interface ThemeInstance {\n  readonly isDisabled: boolean\n  readonly themes: Ref<Record<string, InternalThemeDefinition>>\n\n  readonly name: Readonly<Ref<string>>\n  readonly current: DeepReadonly<Ref<InternalThemeDefinition>>\n  readonly computedThemes: DeepReadonly<Ref<Record<string, InternalThemeDefinition>>>\n\n  readonly themeClasses: Readonly<Ref<string | undefined>>\n  readonly styles: Readonly<Ref<string>>\n\n  readonly global: {\n    readonly name: Ref<string>\n    readonly current: DeepReadonly<Ref<InternalThemeDefinition>>\n  }\n}\n\nexport const ThemeSymbol: InjectionKey<ThemeInstance> = Symbol.for('vuetify:theme')\n\nexport const makeThemeProps = propsFactory({\n  theme: String,\n}, 'theme')\n\nfunction genDefaults () {\n  return {\n    defaultTheme: 'light',\n    variations: { colors: [], lighten: 0, darken: 0 },\n    themes: {\n      light: {\n        dark: false,\n        colors: {\n          background: '#FFFFFF',\n          surface: '#FFFFFF',\n          'surface-bright': '#FFFFFF',\n          'surface-light': '#EEEEEE',\n          'surface-variant': '#424242',\n          'on-surface-variant': '#EEEEEE',\n          primary: '#1867C0',\n          'primary-darken-1': '#1F5592',\n          secondary: '#48A9A6',\n          'secondary-darken-1': '#018786',\n          error: '#B00020',\n          info: '#2196F3',\n          success: '#4CAF50',\n          warning: '#FB8C00',\n        },\n        variables: {\n          'border-color': '#000000',\n          'border-opacity': 0.12,\n          'high-emphasis-opacity': 0.87,\n          'medium-emphasis-opacity': 0.60,\n          'disabled-opacity': 0.38,\n          'idle-opacity': 0.04,\n          'hover-opacity': 0.04,\n          'focus-opacity': 0.12,\n          'selected-opacity': 0.08,\n          'activated-opacity': 0.12,\n          'pressed-opacity': 0.12,\n          'dragged-opacity': 0.08,\n          'theme-kbd': '#212529',\n          'theme-on-kbd': '#FFFFFF',\n          'theme-code': '#F5F5F5',\n          'theme-on-code': '#000000',\n        },\n      },\n      dark: {\n        dark: true,\n        colors: {\n          background: '#121212',\n          surface: '#212121',\n          'surface-bright': '#ccbfd6',\n          'surface-light': '#424242',\n          'surface-variant': '#a3a3a3',\n          'on-surface-variant': '#424242',\n          primary: '#2196F3',\n          'primary-darken-1': '#277CC1',\n          secondary: '#54B6B2',\n          'secondary-darken-1': '#48A9A6',\n          error: '#CF6679',\n          info: '#2196F3',\n          success: '#4CAF50',\n          warning: '#FB8C00',\n        },\n        variables: {\n          'border-color': '#FFFFFF',\n          'border-opacity': 0.12,\n          'high-emphasis-opacity': 1,\n          'medium-emphasis-opacity': 0.70,\n          'disabled-opacity': 0.50,\n          'idle-opacity': 0.10,\n          'hover-opacity': 0.04,\n          'focus-opacity': 0.12,\n          'selected-opacity': 0.08,\n          'activated-opacity': 0.12,\n          'pressed-opacity': 0.16,\n          'dragged-opacity': 0.08,\n          'theme-kbd': '#212529',\n          'theme-on-kbd': '#FFFFFF',\n          'theme-code': '#343434',\n          'theme-on-code': '#CCCCCC',\n        },\n      },\n    },\n  }\n}\n\nfunction parseThemeOptions (options: ThemeOptions = genDefaults()): InternalThemeOptions {\n  const defaults = genDefaults()\n\n  if (!options) return { ...defaults, isDisabled: true } as any\n\n  const themes: Record<string, InternalThemeDefinition> = {}\n  for (const [key, theme] of Object.entries(options.themes ?? {})) {\n    const defaultTheme = theme.dark || key === 'dark'\n      ? defaults.themes?.dark\n      : defaults.themes?.light\n    themes[key] = mergeDeep(defaultTheme, theme) as InternalThemeDefinition\n  }\n\n  return mergeDeep(\n    defaults,\n    { ...options, themes },\n  ) as InternalThemeOptions\n}\n\n// Composables\nexport function createTheme (options?: ThemeOptions): ThemeInstance & { install: (app: App) => void } {\n  const parsedOptions = parseThemeOptions(options)\n  const name = ref(parsedOptions.defaultTheme)\n  const themes = ref(parsedOptions.themes)\n\n  const computedThemes = computed(() => {\n    const acc: Record<string, InternalThemeDefinition> = {}\n    for (const [name, original] of Object.entries(themes.value)) {\n      const theme: InternalThemeDefinition = acc[name] = {\n        ...original,\n        colors: {\n          ...original.colors,\n        },\n      }\n\n      if (parsedOptions.variations) {\n        for (const name of parsedOptions.variations.colors) {\n          const color = theme.colors[name]\n\n          if (!color) continue\n\n          for (const variation of (['lighten', 'darken'] as const)) {\n            const fn = variation === 'lighten' ? lighten : darken\n            for (const amount of createRange(parsedOptions.variations[variation], 1)) {\n              theme.colors[`${name}-${variation}-${amount}`] = RGBtoHex(fn(parseColor(color), amount))\n            }\n          }\n        }\n      }\n\n      for (const color of Object.keys(theme.colors)) {\n        if (/^on-[a-z]/.test(color) || theme.colors[`on-${color}`]) continue\n\n        const onColor = `on-${color}` as keyof OnColors\n        const colorVal = parseColor(theme.colors[color]!)\n\n        theme.colors[onColor] = getForeground(colorVal)\n      }\n    }\n\n    return acc\n  })\n  const current = computed(() => computedThemes.value[name.value])\n\n  const styles = computed(() => {\n    const lines: string[] = []\n\n    if (current.value.dark) {\n      createCssClass(lines, ':root', ['color-scheme: dark'])\n    }\n\n    createCssClass(lines, ':root', genCssVariables(current.value))\n\n    for (const [themeName, theme] of Object.entries(computedThemes.value)) {\n      createCssClass(lines, `.v-theme--${themeName}`, [\n        `color-scheme: ${theme.dark ? 'dark' : 'normal'}`,\n        ...genCssVariables(theme),\n      ])\n    }\n\n    const bgLines: string[] = []\n    const fgLines: string[] = []\n\n    const colors = new Set(Object.values(computedThemes.value).flatMap(theme => Object.keys(theme.colors)))\n    for (const key of colors) {\n      if (/^on-[a-z]/.test(key)) {\n        createCssClass(fgLines, `.${key}`, [`color: rgb(var(--v-theme-${key})) !important`])\n      } else {\n        createCssClass(bgLines, `.bg-${key}`, [\n          `--v-theme-overlay-multiplier: var(--v-theme-${key}-overlay-multiplier)`,\n          `background-color: rgb(var(--v-theme-${key})) !important`,\n          `color: rgb(var(--v-theme-on-${key})) !important`,\n        ])\n        createCssClass(fgLines, `.text-${key}`, [`color: rgb(var(--v-theme-${key})) !important`])\n        createCssClass(fgLines, `.border-${key}`, [`--v-border-color: var(--v-theme-${key})`])\n      }\n    }\n\n    lines.push(...bgLines, ...fgLines)\n\n    return lines.map((str, i) => i === 0 ? str : `    ${str}`).join('')\n  })\n\n  function getHead () {\n    return {\n      style: [{\n        children: styles.value,\n        id: 'vuetify-theme-stylesheet',\n        nonce: parsedOptions.cspNonce || false as never,\n      }],\n    }\n  }\n\n  function install (app: App) {\n    if (parsedOptions.isDisabled) return\n\n    const head = app._context.provides.usehead as HeadClient & VueHeadClient<any> | undefined\n    if (head) {\n      if (head.push) {\n        const entry = head.push(getHead)\n        if (IN_BROWSER) {\n          watch(styles, () => { entry.patch(getHead) })\n        }\n      } else {\n        if (IN_BROWSER) {\n          head.addHeadObjs(computed(getHead))\n          watchEffect(() => head.updateDOM())\n        } else {\n          head.addHeadObjs(getHead())\n        }\n      }\n    } else {\n      let styleEl = IN_BROWSER\n        ? document.getElementById('vuetify-theme-stylesheet')\n        : null\n\n      if (IN_BROWSER) {\n        watch(styles, updateStyles, { immediate: true })\n      } else {\n        updateStyles()\n      }\n\n      function updateStyles () {\n        if (typeof document !== 'undefined' && !styleEl) {\n          const el = document.createElement('style')\n          el.type = 'text/css'\n          el.id = 'vuetify-theme-stylesheet'\n          if (parsedOptions.cspNonce) el.setAttribute('nonce', parsedOptions.cspNonce)\n\n          styleEl = el\n          document.head.appendChild(styleEl)\n        }\n\n        if (styleEl) styleEl.innerHTML = styles.value\n      }\n    }\n  }\n\n  const themeClasses = computed(() => parsedOptions.isDisabled ? undefined : `v-theme--${name.value}`)\n\n  return {\n    install,\n    isDisabled: parsedOptions.isDisabled,\n    name,\n    themes,\n    current,\n    computedThemes,\n    themeClasses,\n    styles,\n    global: {\n      name,\n      current,\n    },\n  }\n}\n\nexport function provideTheme (props: { theme?: string }) {\n  getCurrentInstance('provideTheme')\n\n  const theme = inject(ThemeSymbol, null)\n\n  if (!theme) throw new Error('Could not find Vuetify theme injection')\n\n  const name = computed<string>(() => {\n    return props.theme ?? theme.name.value\n  })\n  const current = computed(() => theme.themes.value[name.value])\n\n  const themeClasses = computed(() => theme.isDisabled ? undefined : `v-theme--${name.value}`)\n\n  const newTheme: ThemeInstance = {\n    ...theme,\n    name,\n    current,\n    themeClasses,\n  }\n\n  provide(ThemeSymbol, newTheme)\n\n  return newTheme\n}\n\nexport function useTheme () {\n  getCurrentInstance('useTheme')\n\n  const theme = inject(ThemeSymbol, null)\n\n  if (!theme) throw new Error('Could not find Vuetify theme injection')\n\n  return theme\n}\n\nfunction createCssClass (lines: string[], selector: string, content: string[]) {\n  lines.push(\n    `${selector} {\\n`,\n    ...content.map(line => `  ${line};\\n`),\n    '}\\n',\n  )\n}\n\nfunction genCssVariables (theme: InternalThemeDefinition) {\n  const lightOverlay = theme.dark ? 2 : 1\n  const darkOverlay = theme.dark ? 1 : 2\n\n  const variables: string[] = []\n  for (const [key, value] of Object.entries(theme.colors)) {\n    const rgb = parseColor(value)\n    variables.push(`--v-theme-${key}: ${rgb.r},${rgb.g},${rgb.b}`)\n    if (!key.startsWith('on-')) {\n      variables.push(`--v-theme-${key}-overlay-multiplier: ${getLuma(value) > 0.18 ? lightOverlay : darkOverlay}`)\n    }\n  }\n\n  for (const [key, value] of Object.entries(theme.variables)) {\n    const color = typeof value === 'string' && value.startsWith('#') ? parseColor(value) : undefined\n    const rgb = color ? `${color.r}, ${color.g}, ${color.b}` : undefined\n    variables.push(`--v-${key}: ${rgb ?? value}`)\n  }\n\n  return variables\n}\n"],
  "mappings": "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",
  "names": ["ThemeSymbol", "Symbol", "for", "makeThemeProps", "propsFactory", "theme", "String", "genDefaults", "defaultTheme", "variations", "colors", "lighten", "darken", "themes", "light", "dark", "background", "surface", "primary", "secondary", "error", "info", "success", "warning", "variables", "parseThemeOptions", "options", "arguments", "length", "undefined", "defaults", "isDisabled", "key", "Object", "entries", "mergeDeep", "createTheme", "parsedOptions", "name", "ref", "computedThemes", "computed", "acc", "original", "value", "color", "variation", "fn", "amount", "createRange", "RGBtoHex", "parseColor", "keys", "test", "onColor", "colorVal", "getForeground", "current", "styles", "lines", "createCssClass", "genCssVariables", "themeName", "bgLines", "fgLines", "Set", "values", "flatMap", "push", "map", "str", "i", "join", "getHead", "style", "children", "id", "nonce", "cspNonce", "install", "app", "head", "_context", "provides", "usehead", "entry", "IN_BROWSER", "watch", "patch", "addHeadObjs", "watchEffect", "updateDOM", "updateStyles", "document", "styleEl", "el", "createElement", "type", "setAttribute", "appendChild", "innerHTML", "getElementById", "immediate", "themeClasses", "global", "provideTheme", "props", "getCurrentInstance", "inject", "Error", "newTheme", "provide", "useTheme", "selector", "content", "line", "lightOverlay", "darkOverlay", "rgb", "r", "g", "b", "startsWith", "getLuma"]
}
